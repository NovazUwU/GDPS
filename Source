local Level = 70
local Calculate = @native function(Damage) return math.round(Damage * (1 + (Level - 1) * 8.2 / 100)) end 
local format = @native function(number) local i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)') int = int:reverse():gsub("(%d%d%d)", "%1,") return minus .. int:reverse():gsub("^,", "") end
local Units = {
    ["Hakari (Evo)"] = {
        Damage = Calculate(6500),
        SPA = 11,
        Range = 36,
        Placements = 2
    },
    Hakari = {
        Damage = Calculate(3500),
        SPA = 8,
        Range = 32,
        Placements = 2
    },
    ["Sung Jin-woo"] = {
        Damage = Calculate(3750),
        SPA = 8.5,
        Range = 31,
        Placements = 2
    },
    ["Sung Jin-woo (Evo)"] = {
        Damage = Calculate(5400),
        SPA = 9,
        Range = 30,
        Placements = 2
    },
    Garp = {
        Damage = Calculate(3260),
        SPA = 11.5,
        Range = 30,
        Placements = 3
    },
    ["Garp (Prime)"] = {
        Damage = Calculate(4650),
        SPA = 15,
        Range = 32,
        Placements = 3
    },
    Sharpshooter = {
        Damage = Calculate(2600),
        SPA = 10.5,
        Range = 36,
        Placements = 4
    },
    ["Sharpshooter (Evo)"] = {
        Damage = Calculate(2630),
        SPA = 8.5,
        Range = 37,
        Placements = 4
    },
    Sukuna = {
        Damage = Calculate(2500),
        SPA = 10.5,
        Range = 27,
        Placements = 3,
        Effect = {
            Damage = 0.06,
            Duration = 4
        }
    },
    ["Sukuna (Evo)"] = {
        Damage = Calculate(3270),
        SPA = 10,
        Range = 29,
        Placements = 3,
        Effect = {
            Damage = 0.06,
            Duration = 4
        }
    },
    Natsu = {
        Damage = Calculate(1360),
        SPA = 8,
        Range = 30,
        Placements = 4,
        Effect = {
            Damage = 0.1,
            Duration = 4
        }
    }, 
    ["Natsu (Evo)"] = {
        Damage = Calculate(2400),
        SPA = 8,
        Range = 30,
        Placements = 4,
        Effect = {
            Damage = 0.1,
            Duration = 4
        }
    },
    Sasuke = {
        Damage = Calculate(2650),
        SPA = 12,
        Range = 23,
        Placements = 4
    },
    ["Sasuke (Evo)"] = {
        Damage = Calculate(3600),
        SPA = 11.5,
        Range = 25,
        Placements = 4
    },
    ["Skull Warrior"] = {
        Damage = Calculate(1550),
        SPA = 7,
        Range = 45,
        Placements = 4
    },
    ["Skull Warrior (Evo)"] = {
        Damage = Calculate(2350),
        SPA = 9,
        Range = 50,
        Placements = 4
    },
    Frieren = {
        Damage = Calculate(2800),
        SPA = 11,
        Range = 26,
        Placements = 3
    },
    ["Frieren (Evo)"] = {
        Damage = Calculate(4000),
        SPA = 13,
        Range = 27,
        Placements = 3
    },
    Mob = {
        Damage = Calculate(1350),
        SPA = 6,
        Range = 34,
        Placements = 4
    },
    ["Mob (Evo)"] = {
        Damage = Calculate(1850),
        SPA = 7,
        Range = 35,
        Placements = 4
    },
    Beru = {
        Damage = Calculate(2200),
        SPA = 10.5,
        Range = 19,
        Placements = 4
    },
    ["Beru (Evo)"] = {
        Damage = Calculate(3000),
        SPA = 12,
        Range = 25,
        Placements = 4
    },
    Igris = {
        Damage = Calculate(5000),
        SPA = 12.5,
        Range = 30,
        Placements = 2
    },
    ["Igris (Evo)"] = {
        Damage = Calculate(7300),
        SPA = 12,
        Range = 31,
        Placements = 2
    },
    Tank = {
        Damage = Calculate(1560),
        SPA = 8,
        Range = 30,
        Placements = 4,
        Effect = {
            Damage = 0.05,
            Duration = 4
        }
    },
    ["Tank (Evo)"] = {
        Damage = Calculate(2000),
        SPA = 7.5,
        Range = 30,
        Placements = 4,
        Effect = {
            Damage = 0.05,
            Duration = 4
        }
    },
    Katakuri = {
        Damage = Calculate(1540),
        SPA = 6.5,
        Range = 22.5,
        Placements = 3
    },
    ["Katakuri (Evo)"] = {
        Damage = Calculate(2350),
        SPA = 7.5,
        Range = 25,
        Placements = 3
    },
    ["Cha Hae-In"] = {
        Damage = Calculate(1580),
        SPA = 6,
        Range = 24,
        Placements = 4
    },
    ["Cha Hae-In (Evo)"] = {
        Damage = Calculate(2100),
        SPA = 7.5,
        Range = 25,
        Placements = 4
    },
    ["Slime Spirit"] = {
        Damage = Calculate(2750),
        SPA = 6.5,
        Range = 39,
        Placements = 1
    },
    ["Slime Spirit Queen"] = {
        Damage = Calculate(3650),
        SPA = 7.5,
        Range = 40,
        Placements = 1
    },
    Gojo = {
        Damage = Calculate(3550),
        SPA = 6.5,
        Range = 39,
        Placements = 2
    },
    ["Gojo (Awakened)"] = {
        Damage = Calculate(9200),
        SPA = 14.5,
        Range = 42,
        Placements = 2
    },
    ["Water Swordsmaster"] = {
        Damage = Calculate(2200),
        SPA = 7,
        Range = 32,
        Placements = 3
    },    
    ["Water Grandmaster"] = {
        Damage = Calculate(3000),
        SPA = 7,
        Range = 34,
        Placements = 3
    },
    ["Beast Sorcerer"] = {
        Damage = Calculate(1600),
        SPA = 5.5,
        Range = 23,
        Placements = 4
    },
    ["Monster Sorcerer"] = {
        Damage = Calculate(2100),
        SPA = 6.5,
        Range = 32,
        Placements = 4
    },
    ["Muscular Sorcerer"] = {
        Damage = Calculate(1750),
        SPA = 5.5,
        Range = 23,
        Placements = 3
    },
    ["Muscular Sorcerer (Enhanced)"] = {
        Damage = Calculate(2300),
        SPA = 5.5,
        Range = 23,
        Placements = 3
    }
}

local Traits = {
    Traitless = {},
    Brawler = {
        Damage = 1.15 
    },
    Swiftness = {
        SPA = 0.875
    },
    Hunter = {
        Range = 1.15
    },
    Critical = {
        Rate = 0.30
    },
    Bullseye = {
        Range = 1.25
    },
    Sonic = {
        SPA = 0.8
    },
    Precision = {
        Rate = 0.30,
        Critical = 1.30
    },
    Requiem = {
        Damage = 1.20,
        SPA = 0.9,
        Range = 1.20
    },
    Almighty = {
        Damage = 3.8,
        SPA = 0.85,
        Range = 1.10,
        Placements = 1
    } 
}

local Results = {}
local SingleHandler = @native function(Name, Trait, Stats, Data)
    local Placements = Stats["Placements"]
    local Effect = Stats["Effect"]
    
    local Damage = Stats["Damage"] * 1.2 --* 1.05
    local SPA = Stats["SPA"] * 0.9
    local Range = Stats["Range"] * 1.1
    local Critical = 1.5
    local Rate = 0 

    for i,v in next, Data do
        if i == "Rate" then Rate += v 
        elseif i == "Critical" then Critical *= v
        elseif i == "SPA" then SPA *= v
        elseif i == "Damage" then Damage *= v
        elseif i == "Placements" then Placements = v 
        elseif i == "Range" then Range *= v
        end 
    end 

    local Critical = Damage * (1 + Rate * (Critical - 1))
    local DPS = Critical / SPA 

    if Effect then DPS += Damage * (Effect["Damage"] * Effect["Duration"]) / SPA end 

    Results[#Results + 1] = {
        Name = Name,
        Trait = Trait,
        GDPS = DPS * Placements,
        DPS = DPS,
        Damage = Damage, 
        SPA = SPA,
        Range = Range,
        Placements = Placements
    }
end 

local DoubleHandler = @native function(Name, Trait, Trait1, Stats, Data, Data1)
    local Placements = Stats["Placements"]
    local Effect = Stats["Effect"]
    
    local Damage = Stats["Damage"] * 1.2 --* 1.05
    local SPA = Stats["SPA"] * 0.9
    local Range = Stats["Range"] * 1.1
    local Critical = 1.5
    local Rate = 0 

    for i,v in next, Data do
        if i == "Rate" then Rate += v 
        elseif i == "Critical" then Critical *= v
        elseif i == "SPA" then SPA *= v
        elseif i == "Damage" then Damage *= v
        elseif i == "Placements" then Placements = v 
        elseif i == "Range" then Range *= v
        end 
    end 

    for i,v in next, Data1 do
        if i == "Rate" then Rate += v 
        elseif i == "Critical" then Critical *= v
        elseif i == "SPA" then SPA *= v
        elseif i == "Damage" then Damage *= v
        elseif i == "Placements" then Placements = v 
        elseif i == "Range" then Range *= v
        end 
    end 

    local Critical = Damage * (1 + Rate * (Critical - 1))
    local DPS = Critical / SPA 

    if Effect then 
        DPS += Damage * (Effect["Damage"] * Effect["Duration"]) / SPA 
    end 

    Results[#Results + 1] = {
        Name = Name,
        Trait = string.format("%s + %s", Trait, Trait1),
        GDPS = DPS * Placements,
        DPS = DPS,
        Damage = Damage, 
        SPA = SPA,
        Range = Range,
        Placements = Placements
    }
end 

local SingleTrait = @native function(Name, Stats)
    for Trait, Data in next, Traits do  
        SingleHandler(Name, Trait, Stats, Data)
    end 
end 

local DoubleTrait = @native function(Name, Stats)
    local Seen = {}
    for i,v in next, Traits do Seen[i] = {} end
    for Trait, Data in next, Traits do 
        for Trait1, Data1 in next, Traits do 
            if Trait1 ~= Trait and not Seen[Trait][Trait1] then 
                DoubleHandler(Name, Trait, Trait1, Stats, Data, Data1)
                Seen[Trait1][Trait] = true 
            end 
        end 
    end 
end

local SingleOutput = "made by @cloneref\n\nall units shown are with S stats and shiny\n\nFormat: Ranking. Trait: Group DPS, DPS | Stats\n"
local DoubleOutput = "made by @cloneref\n\nall units shown are with S stats and shiny\n\nFormat: Ranking. Trait: Group DPS, DPS | Stats\n"

do 
    table.foreach(Units, SingleTrait)
    table.sort(Results, @native function(A, B) return A["GDPS"] > B["GDPS"] end)

    for i,v in next, Results do 
        local SPA, Range = v["SPA"], v["Range"]
        SingleOutput ..= string.format("\n%d. %s %s: %s GDPS, %s DPS | Damage: %d, SPA: %s, Range: %s\n", i, v["Trait"], v["Name"], format(math.round(v["GDPS"])), format(math.round(v["DPS"])), v["Damage"], SPA == math.floor(SPA) and string.format("%.0f", SPA) or string.format("%.2f", SPA):gsub("%.?0+$", ""), Range == math.floor(Range) and string.format("%.0f", Range) or string.format("%.2f", Range):gsub("%.?0+$", "")) 
    end 
end 

Results = {}

do 
    table.foreach(Units, DoubleTrait)
    table.sort(Results, @native function(A, B) return A["GDPS"] > B["GDPS"] end)

    for i,v in next, Results do 
        local SPA, Range = v["SPA"], v["Range"]
        DoubleOutput ..= string.format("\n%d. %s %s: %s GDPS, %s DPS | Damage: %d, SPA: %s, Range: %s\n", i, v["Trait"], v["Name"], format(math.round(v["GDPS"])), format(math.round(v["DPS"])), v["Damage"], SPA == math.floor(SPA) and string.format("%.0f", SPA) or string.format("%.2f", SPA):gsub("%.?0+$", ""), Range == math.floor(Range) and string.format("%.0f", Range) or string.format("%.2f", Range):gsub("%.?0+$", "")) 
    end 
end 

writefile("crack_v3_single.txt", SingleOutput)
writefile("crack_v3_double.txt", DoubleOutput)
